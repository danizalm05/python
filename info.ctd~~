<?xml version="1.0" ?>
<cherrytree>
	<node custom_icon_id="0" foreground="" is_bold="False" name="python" prog_lang="custom-colors" readonly="False" tags="" ts_creation="0.0" ts_lastsave="0.0" unique_id="6">
		<rich_text></rich_text>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Python Server" prog_lang="custom-colors" readonly="False" tags="" ts_creation="0.0" ts_lastsave="0.0" unique_id="5">
			<rich_text> python HTTPServer
 1. Move to the Dir of  your project.
 2. Type in Terminal:
        python -m SimpleHTTPServer
    Or if you are using Python 3, type:
        python -m http.server
 3. visit </rich_text>
			<rich_text link="webs http://localhost:8000">http://localhost:8000</rich_text>
			<rich_text> on your browser.</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Deep learning" prog_lang="custom-colors" readonly="False" tags="" ts_creation="0.0" ts_lastsave="0.0" unique_id="13">
			<rich_text></rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Install tenserflow" prog_lang="custom-colors" readonly="False" tags="" ts_creation="0.0" ts_lastsave="0.0" unique_id="14">
				<rich_text>1 Start  anaconda
2 Create a new environment 
3 Check All and search for  tensorflow
4 Check tensor
5 Applly the change
6 From Pycharm create a new project and chose the env of stage 2

 
        </rich_text>
				<rich_text link="webs https://www.youtube.com/channel/UCR1-GEpyOPzT2AO4D_eifdw">Jeff Heaton</rich_text>
				<rich_text>    /t81-558/
      
github   </rich_text>
				<rich_text link="webs https://github.com/jeffheaton/t81_558_deep_learning">https://github.com/jeffheaton/t81_558_deep_learning</rich_text>
				<rich_text>                
youtube </rich_text>
				<rich_text link="webs https://www.youtube.com/watch?v=59duINoc8GM">https://www.youtube.com/watch?v=59duINoc8GM</rich_text>
				<rich_text>



install miniconda from:</rich_text>
				<rich_text link="webs https://docs.conda.io/en/latest/miniconda.html">https://docs.conda.io/en/latest/miniconda.html</rich_text>
				<rich_text>


1 open anaconda prompet
2 run:     </rich_text>
				<rich_text family="monospace">conda create -y --name tensorflow python=3.6</rich_text>
				<rich_text>
To activate this environment, use
   $ conda activate tensorflow
 
    $ conda deactivate
 After this, base has cchanged to TensorFlow   
 if we print python --version we get :
                      Python 3.6.9 :: Anaconda, Inc.
                      
 3  </rich_text>
				<rich_text scale="h1">Installing Jupyter </rich_text>
				<rich_text>
it is easy to install Jupyter notebooks with the following command:
</rich_text>
				<rich_text family="monospace">conda install -y jupyter</rich_text>
				<rich_text>
Once Jupyter is installed, it is started with the following command:
</rich_text>
				<rich_text family="monospace">jupyter notebook</rich_text>
				<rich_text>                



</rich_text>
				<rich_text link="webs https://stackoverflow.com/questions/39759623/jupyter-notebook-server-password-invalid">https://stackoverflow.com/questions/39759623/jupyter-notebook-server-password-invalid</rich_text>
				<rich_text>
change password:    jupyter notebook password   #lu 5

install all file from the  list in url:(The list is at the end of page)
</rich_text>
				<rich_text link="webs https://github.com/jeffheaton/t81_558_deep_learning/blob/master/t81_558_class_01_1_overview.ipynb">https://github.com/jeffheaton/t81_558_deep_learning/blob/master/t81_558_class_01_1_overview.ipynb</rich_text>
				<rich_text>
 </rich_text>
				<rich_text family="monospace">
1 conda install -y scipy
2  pip install --exists-action i --upgrade sklearn
3  pip install --exists-action i --upgrade pandas
</rich_text>
				<rich_text> 
4    </rich_text>
				<rich_text family="monospace">pip install --exists-action i --upgrade pandas-datareader
5  pip install --exists-action i --upgrade matplotlib
6  pip install --exists-action i --upgrade pillow
7  pip install --exists-action i --upgrade tqdm
8  pip install --exists-action i --upgrade requests
9  pip install --exists-action i --upgrade h5py
10 pip install --exists-action i --upgrade pyyaml
11 pip install --exists-action i --upgrade tensorflow_hub
12 pip install --exists-action i --upgrade bayesian-optimization
13 pip install --exists-action i --upgrade spacy
14 pip install --exists-action i --upgrade gensim
15 pip install --exists-action i --upgrade flask
16 pip install --exists-action i --upgrade boto3
17 pip install --exists-action i --upgrade gym
18 pip install --exists-action i --upgrade tensorflow==2.0.0-beta1
19 pip install --exists-action i --upgrade keras-rl2 --user</rich_text>
				<rich_text>
20 </rich_text>
				<rich_text family="monospace">conda update -y --all</rich_text>
				<rich_text>


A. testing:

 1. conda activate tensorflow
 2 run python
 3 import tensorflow  as  tf
 4print: print(tf.__version__) # 2.0.0-beta1
 
 

B.  Connect  jupyter to  tensorflow:
 </rich_text>
				<rich_text family="monospace">python -m ipykernel install --user --name tensorflow --display-name &quot;Python 3.6 (tensorflow)&quot;</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Using Google  Colab" prog_lang="custom-colors" readonly="False" tags="" ts_creation="0.0" ts_lastsave="0.0" unique_id="15">
				<rich_text>How to  Colab:   
</rich_text>
				<rich_text link="webs https://www.youtube.com/watch?v=Pt-Od-oBgOM&amp;list=PLjy4p-07OYzulelvJ5KVaT2pDlxivl_BN&amp;index=9">https://www.youtube.com/watch?v=Pt-Od-oBgOM&amp;list=PLjy4p-07OYzulelvJ5KVaT2pDlxivl_BN&amp;index=9</rich_text>
				<rich_text>
CoLab:     </rich_text>
				<rich_text link="webs https://colab.research.google.com/notebooks/welcome.ipynb">https://colab.research.google.com/notebooks/welcome.ipynb</rich_text>
				<rich_text>

file/open/github  an  enter:  jeffheaton
or open this  url
</rich_text>
				<rich_text link="webs https://colab.research.google.com/github/jeffheaton/t81_558_deep_learning/">https://colab.research.google.com/github/jeffheaton/t81_558_deep_learning/</rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Virtual Environment" prog_lang="custom-colors" readonly="False" tags="" ts_creation="0.0" ts_lastsave="0.0" unique_id="16">
			<rich_text scale="h2" weight="heavy">Creating a virtual environment  </rich_text>
			<rich_text>
 
1.  virtualenv scrapingEnv

Creates a new environment called scrapingEnv, which you must activate to use:

2.  cd scrapingEnv/
3.  source bin/activate

After you have activated the environment, you will see that environment’s name in your command-line prompt 
 
Working in the newly created scrapingEnv environment, you can install and use
BeautifulSoup; for instance:

(scrapingEnv)ryan$ pip install beautifulsoup4
(scrapingEnv)ryan$ python
&gt; from bs4 import BeautifulSoup

You can leave the environment with the deactivate command, after which you can
no longer access any libraries that were installed inside the virtual environment:
 
Keeping all your libraries separated by project also makes it easy to zip up the entire environment folder  
 
  you can apply a virtual environment anytime simply
by activating it beforehand.</rich_text>
		</node>
	</node>
	<node custom_icon_id="0" foreground="" is_bold="False" name="information" prog_lang="custom-colors" readonly="False" tags="" ts_creation="0.0" ts_lastsave="0.0" unique_id="11">
		<rich_text></rich_text>
		<node custom_icon_id="0" foreground="" is_bold="False" name="file system" prog_lang="custom-colors" readonly="False" tags="" ts_creation="0.0" ts_lastsave="0.0" unique_id="4">
			<rich_text>cmd - current directory
 cd Desktop/ - move to desktop directory
 mkdir  &lt;dir name&gt;  - create  directory
1.   rmdir  &lt;dir name&gt;  - remove directory
2.   cherrytree - 
3.   man 
4.   echo “Hello” &gt; new.txt - Print ‘hello’ in the ‘new.txt’  file
5.   rm   new.txt - delete ‘new.txt’  file
6.   mv &lt;file&gt;  &lt;destinatio&gt;
7.   locate &lt;file&gt; - locate a file
8.   update
9.   chmod +x &lt;file&gt;
10.  cat  /etc/passwd
11.  cat  /etc/shadow - show content of shadow file
12.  su &lt;user name&gt;  -  Switch to anoter user
13.  history:  list history  of commands
            history | grep ping
14.  cat 
15.  touch &lt;file name &gt;: Create  file 
 
17.  sudo apt purge *impacket* :  uninstall
18. cd /opt 
19. sudo git  clone </rich_text>
			<rich_text link="webs https://github.com/SecureAuthCorp/impacket.git">https://github.com/SecureAuthCorp/impacket.git</rich_text>
			<rich_text>

 

 
 
 </rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="network commands" prog_lang="custom-colors" readonly="False" tags="" ts_creation="0.0" ts_lastsave="0.0" unique_id="3">
			<rich_text>ifconfig:
iwconfig:
ping:
arp -a:
netstat -ano:     Active Internet connections (servers and established)
route:  Kernel IP   routing
python  -m SimpleHTTPServer  80:  Strat a server
 </rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="proxychains" prog_lang="custom-colors" readonly="False" tags="" ts_creation="0.0" ts_lastsave="0.0" unique_id="2">
				<rich_text link="webs https://www.youtube.com/watch?v=jqrd9Ba3VOc&amp;list=PLBf0hzazHTGOEuhPQSnq-Ej8jRyXxfYvl&amp;index=9">https://www.youtube.com/watch?v=jqrd9Ba3VOc&amp;list=PLBf0hzazHTGOEuhPQSnq-Ej8jRyXxfYvl&amp;index=9</rich_text>
				<rich_text>

1. nano /etc/proxychains.conf
2. comment  random_chain   and  strict_chain
3. uncomment  dynamic_chain
4.   run: service tor status
      result :  * tor is running
5.  service tor start
6.  run: proxychains &lt;application name&gt; &lt;parmeters&gt;
    Examples  proxychains  firefox </rich_text>
				<rich_text link="webs http://www.duckduckgo.com">www.duckduckgo.com</rich_text>
				<rich_text>  (can't run firefox as root)
                   proxychains nmap &lt;ip&gt;
7.  In order to test DNS leaks  in the serach window print  “test DNS leaks”
      chose “</rich_text>
				<rich_text link="webs https://www.dnsleaktest.com/" scale="h2" weight="heavy">DNS</rich_text>
				<rich_text link="webs https://www.dnsleaktest.com/" scale="h2"> </rich_text>
				<rich_text link="webs https://www.dnsleaktest.com/" scale="h2" weight="heavy">leak</rich_text>
				<rich_text link="webs https://www.dnsleaktest.com/" scale="h2"> test</rich_text>
				<rich_text>”
    result     Hello 51.68.201.115  from , 
8.  To retest: close firefox and run service tor restart   
                    and run : proxychains  firefox </rich_text>
				<rich_text link="webs http://www.duckduckgo.">www.duckduckgo</rich_text>
				<rich_text>
                   chose “</rich_text>
				<rich_text link="webs https://www.dnsleaktest.com/" scale="h2" weight="heavy">DNS</rich_text>
				<rich_text link="webs https://www.dnsleaktest.com/" scale="h2"> </rich_text>
				<rich_text link="webs https://www.dnsleaktest.com/" scale="h2" weight="heavy">leak</rich_text>
				<rich_text link="webs https://www.dnsleaktest.com/" scale="h2"> test</rich_text>
				<rich_text>”
                   and the ip is diffrent
 In Kali  case  TOR is not fount: “e: Unable to locate Package” Error in kali linux
 1  nano   /etc/apt/sources.list   
 2. Go to the website below:
       </rich_text>
				<rich_text link="webs https://www.kali.org/docs/general-use/kali-linux-sources-list-repositories/">https://www.kali.org/docs/general-use/kali-linux-sources-list-repositories/</rich_text>
				<rich_text>
 3. get the repositories and add in source.list file and save    
 4. content of  /etc/apt/sources.list :
        deb http://http.kali.org/kali kali-rolling main non-free contrib
       deb-src http://http.kali.org/kali kali-rolling main non-free contrib
 5.  run sudo apt-get   install tor
                  
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="nmap" prog_lang="custom-colors" readonly="False" tags="" ts_creation="0.0" ts_lastsave="0.0" unique_id="12">
				<rich_text link="webs https://shushan.co.il/%D7%90%D7%99%D7%A1%D7%95%D7%A3-%D7%9E%D7%99%D7%93%D7%A2-%D7%A2%D7%9C-%D7%99%D7%93%D7%99-nmap">https://shushan.co.il/%D7%90%D7%99%D7%A1%D7%95%D7%A3-%D7%9E%D7%99%D7%93%D7%A2-%D7%A2%D7%9C-%D7%99%D7%93%D7%99-nmap</rich_text>
				<rich_text>



 Nmap is used to discover hosts and services on a computer network by sending packets and analyzing the responsesls
</rich_text>
				<rich_text link="webs https://www.youtube.com/watch?v=5MTZdN9TEO4&amp;list=PLBf0hzazHTGOEuhPQSnq-Ej8jRyXxfYvl&amp;index=4">https://www.youtube.com/watch?v=5MTZdN9TEO4&amp;list=PLBf0hzazHTGOEuhPQSnq-Ej8jRyXxfYvl&amp;index=4</rich_text>
				<rich_text>

nmap -help
nmap -v -A scanme.nmap.org
nslookup  : ip

ifconfig   etho : inet  10.0.2.15
scan and output  results  to  a file named res
nmap -oG - 10.0.2.0-255 -vv &gt;  res 
scan for  port  22  and output  results  to  a file named res
nmap -oG - 10.0.2.0-255 -p 22 -vv &gt;  res 

nmap --help 
nmap -0  
nmap -A  &lt;addr&gt;     # find os
nmap -sV &lt;addr&gt;    #Find services
nmap -F  www.google.com &gt; scan.txt    #Most commanly  targeted ports
</rich_text>
				<rich_text link="webs https://www.youtube.com/watch?v=OUQkCAHdX_g&amp;list=PLBf0hzazHTGOEuhPQSnq-Ej8jRyXxfYvl&amp;index=7">https://www.youtube.com/watch?v=OUQkCAHdX_g&amp;list=PLBf0hzazHTGOEuhPQSnq-Ej8jRyXxfYvl&amp;index=7</rich_text>
				<rich_text>
6:00
nmap --open

zenmap  =  Grapical  interface  for  nmap

</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Macchanger" prog_lang="custom-colors" readonly="False" tags="" ts_creation="0.0" ts_lastsave="0.0" unique_id="7">
				<rich_text>macchanger   --help
macchanger -s  etho  // Show current mac
macchanger -a  etho // Change mac address to a random address
macchanger -p  etho // Reset to the  original mac  address</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="wget" prog_lang="custom-colors" readonly="False" tags="" ts_creation="0.0" ts_lastsave="0.0" unique_id="17">
				<rich_text>wget  -mk &lt;url&gt;: Clone a website to  local machine</rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="wifi" prog_lang="custom-colors" readonly="False" tags="" ts_creation="0.0" ts_lastsave="0.0" unique_id="1">
			<rich_text></rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="airmon" prog_lang="custom-colors" readonly="False" tags="" ts_creation="0.0" ts_lastsave="0.0" unique_id="8">
				<rich_text link="webs https://www.youtube.com/watch?v=uFRKwWxMa8Y">https://www.youtube.com/watch?v=uFRKwWxMa8Y</rich_text>
				<rich_text>
www.aircrack-ng.org

1. airmon-ng:


Interface	Chipset		Driver

wlp4s0		Intel AC	iwlwifi - [phy0]



2. ifconfig:
 
enp2s0    Link encap:Ethernet  HWaddr 2c:fd:a1:b1:00:92  
          UP BROADCAST MULTICAST  MTU:1500  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)

lo        Link encap:Local Loopback  
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:65536  Metric:1
          RX packets:1325 errors:0 dropped:0 overruns:0 frame:0
          TX packets:1325 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:127479 (127.4 KB)  TX bytes:127479 (127.4 KB)

wlp4s0    Link encap:Ethernet  HWaddr e4:70:b8:d3:12:56  
          inet addr:192.168.43.30  Bcast:192.168.43.255  Mask:255.255.255.0
          inet6 addr: fe80::ec82:87c5:1d45:41be/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:51251 errors:0 dropped:0 overruns:0 frame:0
          TX packets:27462 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:62110954 (62.1 MB)  TX bytes:3114896 (3.1 MB)


3. iwconfig
4. airmon-ng check  #List of  processes that could cause trouble
5. airmon-ng check kill  #Kill  processes that could cause trouble
6.   airmon-ng start   wlp4s0 
  
  Interface	Chipset		Driver

wlp4s0		Intel AC	iwlwifi - [phy0]
				(monitor mode enabled on mon0)

7. ifconfig:

 mon0      Link encap:UNSPEC  HWaddr E4-70-B8-D3-12-56-3A-30-00-00-00-00-00-00-00-00  
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)

8. airodump-ng  mon0

</rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Bandit" prog_lang="custom-colors" readonly="False" tags="" ts_creation="0.0" ts_lastsave="0.0" unique_id="18">
			<rich_text>OverTheWire: </rich_text>
			<rich_text link="webs https://overthewire.org">https://overthewire.org</rich_text>
			<rich_text>
</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="0-6" prog_lang="custom-colors" readonly="False" tags="" ts_creation="0.0" ts_lastsave="1584977694.68" unique_id="21">
				<rich_text> 

 
ssh://[user@]hostname[:port]
ssh  bandit0@bandit.labs.overthewire.org  -p 2220

</rich_text>
				<rich_text underline="single" weight="heavy">base64</rich_text>
				<rich_text>
base64 -d &lt;file name&gt; : decodes base64 encoded file  

</rich_text>
				<rich_text underline="single" weight="heavy">bzip2</rich_text>
				<rich_text>: compressed data 
 bzip2 -d data: Decompress   file
 
</rich_text>
				<rich_text underline="single" weight="heavy">cat</rich_text>
				<rich_text>
 cat ./- : out a file called ‘- ’
 cat &quot;spaces in this filename&quot;:  output a file called “spaces in this filename” 
 cat .inhere :output  a hidden file name “nihere”

</rich_text>
				<rich_text underline="single" weight="heavy">cp</rich_text>
				<rich_text>
 cp data.txt /tmp/yourname

</rich_text>
				<rich_text underline="single" weight="heavy">file</rich_text>
				<rich_text>  
 file ./*  : Show type of all  files in this directory

</rich_text>
				<rich_text underline="single" weight="heavy">find</rich_text>
				<rich_text>
 find ./ -size 1033c ! -executable:    find a file somewhere under the inhere directory and has  all  of the   following  properties:  
     human-readable   • 1033 bytes in size  • not executable
find / -type f -user bandit7 -group bandit6 -size 33c :   find a file tored somewhere on the server and has all of the following properties:
    owned by user bandit7   owned by group bandit6  33 bytes in size
  
</rich_text>
				<rich_text underline="single" weight="heavy">grep</rich_text>
				<rich_text>
 grep &quot;millionth&quot;  data.txt:  find the line in file data.txt next to the word millionth

</rich_text>
				<rich_text underline="single" weight="heavy">gzip</rich_text>
				<rich_text> 
 gzip -d data.gz: Decompress file
</rich_text>
				<rich_text underline="single" weight="heavy">mkdir</rich_text>
				<rich_text>
mkdir /tmp/yourname  
</rich_text>
				<rich_text underline="single" weight="heavy">sort</rich_text>
				<rich_text> 
sort data.txt | uniq -c  : line of text that occurs only once 

</rich_text>
				<rich_text underline="single" weight="heavy">strings:</rich_text>
				<rich_text>  print the strings of printable characters in files.
 strings data.txt | grep '^=' : Find strings beginning with several ‘=’ characters.
 
</rich_text>
				<rich_text underline="single" weight="heavy">tr</rich_text>
				<rich_text>
 cat greekfile | tr “[a-z]” “[A-Z]”: Translate lower to capital  letter
 cat data.txt | tr 'A-Za-z' 'N-ZA-Mn-za-m' :translate A to N B to M C to O ....
 echo &quot;Welcome To GeeksforGeeks&quot; | tr [:space:] '\t': translate all the white-space to tabs
 
 
</rich_text>
				<rich_text family="monospace" underline="single" weight="heavy">xxd</rich_text>
				<rich_text family="monospace">  creates  a hex dump of a file</rich_text>
				<rich_text> 
</rich_text>
				<rich_text family="monospace">xxd test.txt</rich_text>
				<rich_text>: Output  hexdump to  console
xxd -r data.txt data.out: Reverse from hex dump  to  original 

 
 </rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="start monitor" prog_lang="custom-colors" readonly="False" tags="" ts_creation="0.0" ts_lastsave="0.0" unique_id="10">
			<rich_text>
#wifite  -showb  #show all spots
# airmon-ng &lt;start|stop|check&gt; &lt;interface&gt; [channel or frequency]
iwconfig
airmon-ng check  #List of  processes that could cause trouble
airmon-ng check kill  #Kill  processes that could cause trouble
airmon-ng start  wlan0 # Start monitoring  wlan0
iwconfig
airodump-ng  wlan0mon #  (or  mon0) list  access points

besside-ng  wlan0mon 

besside-ng  wlan0mon --bssid  &lt;mac&gt; -c &lt;channl num&gt;# listen to this  mac and this channl      n</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Stop monitor mode" prog_lang="custom-colors" readonly="False" tags="" ts_creation="0.0" ts_lastsave="0.0" unique_id="9">
			<rich_text> 
  
 airmon-ng stop wlan1mon    
 service networking restart
 service network-manager restart
 ifconfig </rich_text>
		</node>
	</node>
	<node custom_icon_id="0" foreground="" is_bold="False" name="cmd" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1584431613.66" ts_lastsave="1584966037.74" unique_id="20">
		<rich_text underline="single" weight="heavy">arp -av</rich_text>
		<rich_text> :Displays and modifies the IP-to-Physical address translation tables used by
address resolution protocol(arp).
ipconfig /all: chack your  ip
netsh wlan show profile: List all wifi  conected
tracert  </rich_text>
		<rich_text link="webs http://www.bbc.com">www.bbc.com</rich_text>
		<rich_text>:Tracing route to bbc
nslookup
nbtstat
routh
</rich_text>
		<rich_text underline="single" weight="heavy">systeminfo</rich_text>
		<rich_text>: Show info of the  system
</rich_text>
		<rich_text underline="single" weight="heavy">tree</rich_text>
		<rich_text>: graphical representation of all  files
</rich_text>
		<rich_text underline="single" weight="heavy">netsh wlan export  profile folder=c:\  key=clear</rich_text>
		<rich_text> : All paswords are in folder c:
 
</rich_text>
		<rich_text underline="single" weight="heavy">color</rich_text>
		<rich_text> Sets the default console foreground and background colors.
color  1e: background black font=yellow

</rich_text>
		<rich_text underline="single" weight="heavy">wmic product get name</rich_text>
		<rich_text>: List all  programs  installed
</rich_text>
	</node>
</cherrytree>
